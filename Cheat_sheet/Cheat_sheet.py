# Изменяемые типы данных:
# 1. Списки (lists) - упорядоченные коллекции элементов, которые могут быть изменены после создания.
# 2. Словари (dictionaries) - коллекции пар "ключ-значение", которые также могут быть изменены.
# 3. Множества (sets) - коллекции уникальных элементов, которые могут быть изменены.
# 4. Массивы (arrays) - упорядоченные коллекции элементов одного типа, которые могут быть изменены.
#
# Неизменяемые типы данных:
# 1. Числа (integers, floats, complex) - числовые значения, которые не могут быть изменены.
# 2. Строки (strings) - последовательности символов, которые не могут быть изменены.
# 3. Кортежи (tuples) - упорядоченные коллекции элементов, которые не могут быть изменены.
# 4. Замороженные множества (frozen sets) - неизменяемые коллекции уникальных элементов.

a = 1  # type int числа
b = 1.1  # type float числа с плавающей точкой
c = 1 + 2j  # type complex комплексные числа
print(c, "is complex number?",
      isinstance(1 + 2j, complex))  # функция isinstance() для проверки принадлежности объекта определённому классу
list_ = [1, 2.2, 'python']  # type list список. является упорядоченной последовательностью элементов.
# Списки являются изменяемым типом
tuple_ = (1, 2.2, 'python')  # type tuple кортеж. является упорядоченной последовательностью элементов.
# Кортежи являются неизменяемым типом.
# Кортежи используются для защиты данных от перезаписи и обычно работают быстрее, чем списки
set_ = {5, 2, 3, 1, 4, 1, 1, 1}  # type set множества.
# Множество является неупорядоченной уникализированной последовательностью.
# Над множествами можно выполнять такие операции, как объединение и пересечение.
# Т.к. элементы в множестве должны быть уникальны, они автоматически удаляют дубликаты
dict_ = {1:'value', 'key':2}  # type dict словари. Словари — неупорядоченные наборы пар ключ-значение.
# Значение может быть любого типа, а вот ключ — только неизменяемого.

# Перобразование строки в лист и обратно
l = 'Hello'
k = list(l)
print(k)
m = ''.join(k)
print(m)
list_2 = ['Hous']
print(list_2)

#         # break  # выводит из цикла
#         # continue  # пропускает выполнение всех оставшихся команды и возвращает в начало цикла

#Функции
"""def print_params(a = 1, b = 2, c = 3):"""  # установка параметров функции по умолчанию
"""print_params(1, 2, c='String)"""  # первые два позиционные, третий именнованный. порядок строгий.
# важно, чтобы позиционные параметры шли перед именованными
# если мы передаем все именованные параметры, то они могут идти не по порядку
"""def print_params(a,*, b, c):"""  # В таком случае первый параметр «а» у нас может быть позиционным,
# а параметры «b» и «с» будут именованными
"""def print_params2(*params): # позиционный параметр. упаковать параметры. паруются в кортеж tuple
      print(*params)"""  # распаковать параметры
"""
list_ = [5, 7]
print_params(*list_)""" # 5, 7, 3 - список распакуется и переметры займут своё место
def print_params(**kwargs): # именованный параметр. получает в качестве аргумента словарь
      for key, value in kwargs.items():  # вытаскивает из словаря ключ и значение
            print(key, value)  # печатает ключ и значение
      print('Argument: ', kwargs)  # Argument:  {'name': 'Denis', 'status': 'Student'}
dict_ = {'a': 1, 'b': 2, 'd': 3}
print_params(**dict_)  # a 1 b 2 d 3
print_params(name="Denis", status="Student")

"""def info(value, *types, name='Den', **values):"""  # value - позиционный параметр
# *types - произвольное количество позиционных параметров
# name='Den' - именованный параметр. параметр по умолчанию
# **values - произвольное количество именованных параметров
# строгий порядок такой


#         # break  # выводит из цикла
#         # continue  # пропускает выполнение всех оставшихся команды и возвращает в начало цикла