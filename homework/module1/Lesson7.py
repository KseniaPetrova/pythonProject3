#Словари и множества

# Домашня работа
"""
Работа со словарями:
  - Создайте переменную my_dict и присвойте ей словарь из нескольких пар ключ-значение.
Например: Имя(str)-Год рождения(int).
  - Выведите на экран словарь my_dict.
  - Выведите на экран одно значение по существующему ключу, одно по отсутствуещему из словаря my_dict без ошибки.
  - Добавьте ещё две произвольные пары того же формата в словарь my_dict.
  - Удалите одну из пар в словаре по существующему ключу из словаря my_dict и выведите значение из этой пары на экран.
  - Выведите на экран словарь my_dict.

3. Работа с множествами:
  - Создайте переменную my_set и присвойте ей множество, состоящее из разных типов данных с повторяющимися значениями.
  - Выведите на экран множество my_set (должны отобразиться только уникальныые значения).
  - Добавьте 2 произвольных элемента в множество my_set, которых ещё нет.
  - Удалите один любой элемент из множества my_set.
  - Выведите на экран измененное множество my_set.
"""
# Работа со словарями
my_dict = {'Vasya': 1975, 'Egor': 1999, 'Masha': 2002}
print(my_dict)
print(my_dict['Egor'])
print(my_dict.get('Anna'))
my_dict.update({'Sasha': 1896,
                'Alex': 2015})
del_ = my_dict.pop('Masha')
print(del_)
print(my_dict)

# Работа с множествами
my_set = {2, 3, 4, 4, True, True, False, 'Yes', 'No', 'No'}
print(my_set)  # {False, True, 2, 3, 4, 'No', 'Yes'}
my_set.update([9, 5])
print(my_set)  # {False, True, 2, 3, 4, 5, 'Yes', 9, 'No'}
# my_set.pop()  # удаляет вроде бы рандомный элемент, но этот элемент всегда первый при выводе множества
my_set.remove(4)
print(my_set)










# # Лекция
# # Словарь (dict) в программирование – неупорядоченная структура данных, представляющая
# # собой набор ассоциативных пар, которые, в свою очередь, состоят из ключа и его значения.
# # Проще говоря, словарь — это некий ассоциативный список. Он относится к изменяемым объектам.
# # словарь по своей структуре не упорядочен
# # словарь нельзя + или *
# # Можно сравнить словари на равенство или неравенство,
# # равными будут считаться словари с одинаковыми ассоциативными парами.
# # Можно также сравнить отдельно ключи или значения.
# phobe_book = {'Denis': 12345679, 'Max': 78946123}  # словарь хранит {ключ : значение}
# # ключ не может быть листом, потому что он нехэшируемый объект
# # ключ не может быть изменяемым типом данных
# # в качестве значения могут быть неизменяемые и изменяемые (список) типы данных
# print(phobe_book['Denis'])  # 12345679 обращение через ключ
# phobe_book['Denis'] = 456123789  # изменит значение в словаре
# phobe_book['Anton'] = 458793789  # обращение по несуществующему ключу добавляет его
# del phobe_book['Max']  # удалит значение по ключу
# phobe_book.update({'Sasha': 4125893,
#                    'Alex': 3695487})  # обновит словарик и добавит новые пары
# print(phobe_book.get('Denis'))  # 456123789 возвращает значение по ключу
# print(phobe_book.get('Kamila'))  # None - ключ не найден
# print(phobe_book.get('Kamila', 'Такого ключа нет'))  # Такого ключа нет
# a = phobe_book.pop('Anton')  # удалит ключ 'Anton' и запишет его значение в а
# print(phobe_book.keys())  # возвращает ключи словаря
# print(phobe_book.values())  # возвращает значения словаря
# print(phobe_book.items())  # возвращает пару ключ : значение
# print('Alex' in phobe_book)  # проверка на нахождения ключа в словаре
# print(phobe_book.setdefault('Tata', 7778546))  # применяется только для dict (словарь)
# # ищет значение по ключу. Если ключ найден, то возвращает значение
# # если ключ не найдет, возвращает None и добавляет в dict ключ со значением None
# # Если новый ключ найден и значение было задано, возвращает значение и добавляет в dict ключ со значением
# print(phobe_book)
#
# # множества
# # Множество (set) – неупорядоченный набор уникальных элементов.
# # Во многом оно походит на список, однако у него есть ряд отличий.
# # Во-первых, оно не может содержать дубликаты элементов.
# # Во-вторых, элементы внутри множества менять нельзя, хотя само оно является
# # изменяемым (то есть, мы можем добавить или удалить элемент). В-третьих,
# # множество нельзя индексировать.
# print('множества')
# set_ = {1, 2, 3, 4, 1, 2, 1, 1, 2, 'str', True, (5, 6, 7)}  # хранит в себе уникальные значения все типа кроме [list] (списка)
# # множества не имеют упорядоченности
# print(set_) # {1, 2, 3, 4}
# list_ = [1, 1, 1, 2, 3, 3, 4, 5, 6, 7]
# print(set(list_))  # {1, 2, 3, 4, 5, 6, 7} выводит множества
# list_ = set(list_)  # list_ стал множеством
# print(list_)  # {1, 2, 3, 4, 5, 6, 7}
# #print(list_[0]) к множества нельзя обращаться по индексу
# print(list_.discard(1))  # удаляет элемент из множества. не выдаст ошибку если не нашел элемент
# print(list_.remove(2))  # удаляет элемент из множества. выдаст ошибку если не нашел элемент
# b = list_.pop()  # удаляет хз какой элемент из множества и запишет его в переменную b.
# # здесь получается первый
# print(b)
# print(list_)
# print(list_.add(0))  # добавляет элемент
# first_set = {1, 1, 1, 2, 3, 4, 4}
# second_set = {4, 5, 6, 6, 6, 7, 8}
# print(first_set | second_set)  # {1, 2, 3, 4, 5, 6, 7, 8} таким образом мы объединили два множества
# print(first_set & second_set)  # {4} таким образом выведем совпадающие в двух множествах элементы
# print(first_set - second_set)  # {1, 2, 3} вычитание set из set
#
