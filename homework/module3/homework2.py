# Распаковка параметров и параметры функции
""" Задача "Распаковка":
1.Функция с параметрами по умолчанию:
Создайте функцию print_params(a = 1, b = 'строка', c = True), которая принимает три параметра со
значениями по умолчанию (например сейчас это: 1, 'строка', True).
Функция должна выводить эти параметры.
Вызовите функцию print_params с разным количеством аргументов, включая вызов без аргументов.
Проверьте, работают ли вызовы print_params(b = 25) print_params(c = [1,2,3])"""


def print_params(a=1, b='строка', c=True):
    print(a, b, c)


print_params()  # 1 строка True
print_params(b=25)  # предупреждает о смене типа переменной | 1 25 True
print_params(c=[1, 2, 3])  # 1 строка [1, 2, 3]

"""2.Распаковка параметров:
Создайте список values_list с тремя элементами разных типов.
Создайте словарь values_dict с тремя ключами, соответствующими параметрам функции print_params, и 
значениями разных типов.
Передайте values_list и values_dict в функцию print_params, используя распаковку параметров 
(* для списка и ** для словаря)."""
values_list = ['string', 9, False]
values_dict = {'a': False, 'b': 4, 'c': 'list'}
print_params(*values_list)   # string 9 False
print_params(**values_dict)  # False 4 list

"""3.Распаковка + отдельные параметры:
Создайте список values_list_2 с двумя элементами разных типов
Проверьте, работает ли print_params(*values_list_2, 42)"""
values_list_2 = [7, 'value']
print_params(*values_list_2, 42)  # в подсказке a, но на самом деле это с | 7 value 42

"""Пример результата выполнения программы:
Исходный код:
values_list_2 = [54.32, 'Строка' ]]
print_params(*values_list_2, 42)
Вывод на консоль:
54.32 'Строка' 42

Примечания:
Использование параметров по умолчанию позволяет функциям быть гибкими и удобными в использовании.
Распаковка параметров из списка и словаря позволяет передавать группы значений в функцию, что упрощает работу с данными.
Важно!
Не передавайте списки задавая по умолчанию пустой список или другой изменяемый тип данных!
В таком случае, если этот список будет изменён внутри функции, то на следующий вызов функции он останется в том же состоянии.
def a(my_list = [])) – это приводит к ошибкам!

Можно передавать вот так(список создаётся локально, мы не влияем на его изменение вне функции)
def append_to_list(item, list_my=None):
    if list_my is None:
        list_my = []
    list_my.append(item)
print(list_my)"""
